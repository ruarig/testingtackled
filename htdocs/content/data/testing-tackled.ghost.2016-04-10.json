{"meta":{"exported_on":1460277075655,"version":"003"},"data":{"posts":[{"id":2,"uuid":"9ce55d7b-1a47-4976-9879-9936be6e5f01","title":"White Rabbits!","slug":"white-rabbits","markdown":"Wait, isn't that what superstitious folk say on the first of each month? Does that translate well into a first blog post? So many questions!\n\nLet's start as we mean to go on, with a (not so) interesting piece of trivia from our good friends at Wikipedia. While I'm at it I can test out these quote things:\n\n>The exact origin of the superstition is unknown, though it was recorded in Notes and Queries as being said by children in 1909\n\nBored of my waffle? Me too! So why am I starting a blog about testing? Who in their right mind blogs about testing? That thing that developers try to avoid!\n\nWell me it seems!\n\nI'm not going to lie; I fell into software testing and software quality as I'm sure many testers do. Nobody comes out of college or university with aspirations of being a tester do they? I failed to follow a lesson I learnt back at school.........\n\n>Don't do a good job at something you don't want to do!\n\nOn this occasion not following my own life lessons seems to have worked out reasonably well. I found a hidden gem, a topic with depth, variety, interesting challenges and most of all, something that perked the interest of my sad little mind, the chance to break things.\n\nI'm certainly not professing that my opinions are correct or even valid for that matter. They are exactly what it says on the tin........ opinions!\n\nI am also not professing to be an expert in testing. I have certainly got more experience in some areas more so than others however what I think I do have in my favour is quite a broad experience across testing, including varying degrees of exposure to automation, manual testing, waterfall, agile, performance and load, BDD along with a variety of tooling.\n\nI also believe I have quite an open mind to new ideas. Whilst sometimes this can lead to chasing the next new shiny idea, it also allows me to challenge things (usually in the form of asking 'why' a lot). That can be in the form of challenging a traditional process or it could be challenging a new idea or concept.\n\nI was also recently hit with a realisation...... not just that I had a big hole in my underpants. I realised that many other testers have fallen into testing (Ok maybe that isn't such a big realisation). However in many of these cases the testers are not working in open minded, forward thinking teams. They are not encouraged to look into the big wide world for new and improved ideas or ways of working. Sometimes this is down to workload, sometimes because of the attitude of the business and sometimes because of technical constraints, whether that be skills or product. There are however many people in the world of testing who just haven't stuck there head above the parapet and looked around at the rest of the industry. They don't challenge things, not because they don't want to, but because the thought has just never crossed their mind.\n\nSo in short, the reason I am really starting this blog is twofold. To act as a mind dump for the weird and wonderful stuff running around my head and to try and spark thinking and debate around testing, even if the debate happens to be how much rubbish I'm typing!\n\nI feel the need to end this first post on a high, therefore please allow the below image to capture your imagination!\n\n![](/content/images/2014/Aug/img37.jpg) ","html":"<p>Wait, isn't that what superstitious folk say on the first of each month? Does that translate well into a first blog post? So many questions!</p>\n\n<p>Let's start as we mean to go on, with a (not so) interesting piece of trivia from our good friends at Wikipedia. While I'm at it I can test out these quote things:</p>\n\n<blockquote>\n  <p>The exact origin of the superstition is unknown, though it was recorded in Notes and Queries as being said by children in 1909</p>\n</blockquote>\n\n<p>Bored of my waffle? Me too! So why am I starting a blog about testing? Who in their right mind blogs about testing? That thing that developers try to avoid!</p>\n\n<p>Well me it seems!</p>\n\n<p>I'm not going to lie; I fell into software testing and software quality as I'm sure many testers do. Nobody comes out of college or university with aspirations of being a tester do they? I failed to follow a lesson I learnt back at school.........</p>\n\n<blockquote>\n  <p>Don't do a good job at something you don't want to do!</p>\n</blockquote>\n\n<p>On this occasion not following my own life lessons seems to have worked out reasonably well. I found a hidden gem, a topic with depth, variety, interesting challenges and most of all, something that perked the interest of my sad little mind, the chance to break things.</p>\n\n<p>I'm certainly not professing that my opinions are correct or even valid for that matter. They are exactly what it says on the tin........ opinions!</p>\n\n<p>I am also not professing to be an expert in testing. I have certainly got more experience in some areas more so than others however what I think I do have in my favour is quite a broad experience across testing, including varying degrees of exposure to automation, manual testing, waterfall, agile, performance and load, BDD along with a variety of tooling.</p>\n\n<p>I also believe I have quite an open mind to new ideas. Whilst sometimes this can lead to chasing the next new shiny idea, it also allows me to challenge things (usually in the form of asking 'why' a lot). That can be in the form of challenging a traditional process or it could be challenging a new idea or concept.</p>\n\n<p>I was also recently hit with a realisation...... not just that I had a big hole in my underpants. I realised that many other testers have fallen into testing (Ok maybe that isn't such a big realisation). However in many of these cases the testers are not working in open minded, forward thinking teams. They are not encouraged to look into the big wide world for new and improved ideas or ways of working. Sometimes this is down to workload, sometimes because of the attitude of the business and sometimes because of technical constraints, whether that be skills or product. There are however many people in the world of testing who just haven't stuck there head above the parapet and looked around at the rest of the industry. They don't challenge things, not because they don't want to, but because the thought has just never crossed their mind.</p>\n\n<p>So in short, the reason I am really starting this blog is twofold. To act as a mind dump for the weird and wonderful stuff running around my head and to try and spark thinking and debate around testing, even if the debate happens to be how much rubbish I'm typing!</p>\n\n<p>I feel the need to end this first post on a high, therefore please allow the below image to capture your imagination!</p>\n\n<p><img src=\"/content/images/2014/Aug/img37.jpg\" alt=\"\" title=\"\" /> </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1409048697348,"created_by":1,"updated_at":1410256789468,"updated_by":1,"published_at":1409048881304,"published_by":1},{"id":3,"uuid":"dd7ec52e-a776-4b46-aaeb-4af94582bf60","title":"Testing or Quality Assurance.....","slug":"testing-or-quality-assurance","markdown":"Ok so I've had a few discussions over the past week that got me thinking (It may be painful, and often has dire consequences but I do occasionally partake in this past time).\n\nSo are you testers? Are you QA? Does it matter?\n\nYou could be either or you could be both it depends on your approach and no one approach is right or wrong.\n\nI took to Google to see if there were any wider opinions on this and came across this blog post\nhttp://www.developsense.com/blog/2010/05/testers-get-out-of-the-quality-assurance-business/\n\nNow I'm not suggesting any of his opinions are invalid in any way. Moreover I actually think that his point is perfectly valid, certainly from an attitude/interaction perspective.\n\nGetting the respect from the developer and dealing with things you raise in the correct manner is a large part of testing. Testers are testers for a reason and usually have a given skillset that allows them to be good at validating software.\n\nWhat I think the above blog post misses (or avoids) is that different teams and team dynamics, different development models, different structures etc. do influence where and how testers (or Quality Analysts) should be involved. There isn’t any hard and fast rule around how involved testers should be or how far the influence of said testers extends.\n\nLet’s take an example:\n\n>A traditional development team following Waterfall:\nTesters get provided with requirement documents and write all the test scripts while developers perform their magic. A code complete build gets handed over. Testers cast there critical eye over the software in a structured way and report back defects they find. This may go round a few iterations until everyone is happy to release the software (or until someone high up in the business says it has to go out in its current state).\n\nGenerally a team working in this way will have reasonably structured and very specific roles such as business analyst creating requirements, developers writing code and testers checking that the software works as expected. As such you will usually find accountability directly attributable to a given function for failings and therefore it is in the interests of a tester to ensure they are fully focused on performing the testing as effectively as possible. This isn't necessarily a bad thing but it can sometimes foster a \"that's someone else’s problem/fault\" attitude within the separate entities.\nGiven this scenario, I would generally agree that a tester’s role isn't Quality Assurance but more Quality Control (a part of a quality assurance function but not the whole picture). I've been dragged into talking semantics but I will spare you the 'what is quality?' rant.\n\nOk let’s take an alternative example:\n\n>A forward thinking development team trying to deliver value quickly following Agile:\nA product owner (product team) produce stories in line with the users functional needs. Although the expertise within the team is obvious, the team as a whole are responsible and accountable for delivery. The user stories are fleshed out as they move to the top of the backlog with input from the whole team. The development team (including test expertise and product owner) want to <U><B>target</B></U> a right first time approach rather than a find and fix approach. They release monthly but are targeting moving to continuous delivery and because of a good level of automation have a risk based approach to release (regression) testing, keeping the required level to what is necessary. \n\nIn contrast to the more traditional software development approach, the roles in such teams are not as clearly defined, it is just understood that as a team they are responsible for delivery. Analysis, test and development skillsets are all present in the team however it is important that whilst those with the expertise provide the guidance and advice on their specialist areas, the team input together into decisions and work. In a team such as this, to effectively provide delivery on a regular basis every defect found by test after completion of the development work is a delay. It is in the entire teams interests to ensure all the cogs of the team are working as well as possible towards efficient delivery and where this is not the case it is identified as early as possible.\n\nIn a scenario such as the above I believe it is important that one or more people in the given team have an inquisitive approach, willing to ask the right questions and to challenge whether things are being done with consideration for quality in mind. This is in much the same way as it is important to have someone who is challenging whether the solution is the right technical solution (generally a dev skillset). They are not responsible or accountable (that sits with the team as a whole) but have the right knowledge and experience to ask the right questions. Following this idea, is it farfetched or inaccurate to suggest that in its simplest form you may have the following specialism within a team?\n\n- Team Lead (Scrum master, Enabler or other)\n- Developer (technical guidance/coding)\n- Quality Analyst (product and process quality guidance)\n- Product Owner (Domain and functional guidance)\n\nOk that doesn't necessarily mean that the Quality Analyst role fits nicely into a Quality Assurance bubble. Text books around Quality Assurance widen out the remit of Quality Assurance drastically. It does however demonstrate that a test role involving finding defects is not always representative of the needs of a test/quality role within a software development team. In actual fact the ability to be the team’s quality conscience can be a more preventative way of avoiding defects. This in my honest (albeit biased) opinion blurs the boundary from test into Quality Assurance sufficiently to suggest it cannot be discarded as a part a test/QA role. Helping to build quality in, as well as finding those things that slip through the net, isn't too taboo is it?\n\nI'm sure you are more than bored by now so in keeping with my previous post I leave you with an utterly fascinating random image:\n\n![](/content/images/2014/Sep/Diversion-1.jpg)","html":"<p>Ok so I've had a few discussions over the past week that got me thinking (It may be painful, and often has dire consequences but I do occasionally partake in this past time).</p>\n\n<p>So are you testers? Are you QA? Does it matter?</p>\n\n<p>You could be either or you could be both it depends on your approach and no one approach is right or wrong.</p>\n\n<p>I took to Google to see if there were any wider opinions on this and came across this blog post <br />\n<a href='http://www.developsense.com/blog/2010/05/testers-get-out-of-the-quality-assurance-business/'>http://www.developsense.com/blog/2010/05/testers-get-out-of-the-quality-assurance-business/</a></p>\n\n<p>Now I'm not suggesting any of his opinions are invalid in any way. Moreover I actually think that his point is perfectly valid, certainly from an attitude/interaction perspective.</p>\n\n<p>Getting the respect from the developer and dealing with things you raise in the correct manner is a large part of testing. Testers are testers for a reason and usually have a given skillset that allows them to be good at validating software.</p>\n\n<p>What I think the above blog post misses (or avoids) is that different teams and team dynamics, different development models, different structures etc. do influence where and how testers (or Quality Analysts) should be involved. There isn’t any hard and fast rule around how involved testers should be or how far the influence of said testers extends.</p>\n\n<p>Let’s take an example:</p>\n\n<blockquote>\n  <p>A traditional development team following Waterfall:\n  Testers get provided with requirement documents and write all the test scripts while developers perform their magic. A code complete build gets handed over. Testers cast there critical eye over the software in a structured way and report back defects they find. This may go round a few iterations until everyone is happy to release the software (or until someone high up in the business says it has to go out in its current state).</p>\n</blockquote>\n\n<p>Generally a team working in this way will have reasonably structured and very specific roles such as business analyst creating requirements, developers writing code and testers checking that the software works as expected. As such you will usually find accountability directly attributable to a given function for failings and therefore it is in the interests of a tester to ensure they are fully focused on performing the testing as effectively as possible. This isn't necessarily a bad thing but it can sometimes foster a \"that's someone else’s problem/fault\" attitude within the separate entities. <br />\nGiven this scenario, I would generally agree that a tester’s role isn't Quality Assurance but more Quality Control (a part of a quality assurance function but not the whole picture). I've been dragged into talking semantics but I will spare you the 'what is quality?' rant.</p>\n\n<p>Ok let’s take an alternative example:</p>\n\n<blockquote>\n  <p>A forward thinking development team trying to deliver value quickly following Agile:\n  A product owner (product team) produce stories in line with the users functional needs. Although the expertise within the team is obvious, the team as a whole are responsible and accountable for delivery. The user stories are fleshed out as they move to the top of the backlog with input from the whole team. The development team (including test expertise and product owner) want to <U><B>target</B></U> a right first time approach rather than a find and fix approach. They release monthly but are targeting moving to continuous delivery and because of a good level of automation have a risk based approach to release (regression) testing, keeping the required level to what is necessary. </p>\n</blockquote>\n\n<p>In contrast to the more traditional software development approach, the roles in such teams are not as clearly defined, it is just understood that as a team they are responsible for delivery. Analysis, test and development skillsets are all present in the team however it is important that whilst those with the expertise provide the guidance and advice on their specialist areas, the team input together into decisions and work. In a team such as this, to effectively provide delivery on a regular basis every defect found by test after completion of the development work is a delay. It is in the entire teams interests to ensure all the cogs of the team are working as well as possible towards efficient delivery and where this is not the case it is identified as early as possible.</p>\n\n<p>In a scenario such as the above I believe it is important that one or more people in the given team have an inquisitive approach, willing to ask the right questions and to challenge whether things are being done with consideration for quality in mind. This is in much the same way as it is important to have someone who is challenging whether the solution is the right technical solution (generally a dev skillset). They are not responsible or accountable (that sits with the team as a whole) but have the right knowledge and experience to ask the right questions. Following this idea, is it farfetched or inaccurate to suggest that in its simplest form you may have the following specialism within a team?</p>\n\n<ul>\n<li>Team Lead (Scrum master, Enabler or other)</li>\n<li>Developer (technical guidance/coding)</li>\n<li>Quality Analyst (product and process quality guidance)</li>\n<li>Product Owner (Domain and functional guidance)</li>\n</ul>\n\n<p>Ok that doesn't necessarily mean that the Quality Analyst role fits nicely into a Quality Assurance bubble. Text books around Quality Assurance widen out the remit of Quality Assurance drastically. It does however demonstrate that a test role involving finding defects is not always representative of the needs of a test/quality role within a software development team. In actual fact the ability to be the team’s quality conscience can be a more preventative way of avoiding defects. This in my honest (albeit biased) opinion blurs the boundary from test into Quality Assurance sufficiently to suggest it cannot be discarded as a part a test/QA role. Helping to build quality in, as well as finding those things that slip through the net, isn't too taboo is it?</p>\n\n<p>I'm sure you are more than bored by now so in keeping with my previous post I leave you with an utterly fascinating random image:</p>\n\n<p><img src=\"/content/images/2014/Sep/Diversion-1.jpg\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1409928911822,"created_by":1,"updated_at":1410264829120,"updated_by":1,"published_at":1410182024745,"published_by":1},{"id":4,"uuid":"0fe1c481-c214-4da9-887b-63e189075d50","title":"Certification and Standardisation - ISO 29119?","slug":"certification-and-standardisation-so-what-do-you-know","markdown":"I'm going to wade neck deep into the whole ISO 29119 debate; well maybe paddle around the edges. I'm also going to do something that is rare for me which is make my intentions clear right from the very start........... I'm not against ISO 29119!\n\nWhat...... that's blasphemy!\n\n![](/content/images/2014/Oct/shock.jpg) \n\nYou heard correctly I'm not against ISO 29119 however I have little use for it and have no intention of applying it any time soon.\n\nAt the risk of getting splinters from perching on the fence I shall explain.\n\nI don't see any value for me in the ISO 29119 standards. I generally use value as an indicator on many things and ask my team to do the same. If something doesn't seem to be adding value then I expect it's continued usage to be challenged. The reason I don't see any value is ultimately because it doesn't tell me that someone is doing a good job or adding value with testing. In the same way ISQTB doesn't tell me that someone is able to apply what he or she know about testing in a practical way.\n\nI'll be honest....... if I see ISEB or ISQTB certification on a cv it does nothing for me. In fact if I'm honest it leaves me a little concerned.\n\nI don't particularly want my testers to try solving everything with a pre-determined idealistic methodology. I want them to be dynamic thinkers, able to adapt and challenge the software in new ways.\n\nDon't get me wrong I think structure and discipline are important skills for testers but only applied in the right way. Maybe I am driven by my experiences a little to much but in my experience I have found that the testers without any certification and any background in standards compliance have proved to be less constrained and more forward thinking.\n\nIf I really want to put standards around the testing in my team I will identify and apply standards applicable to the needs of the business in line with our own priorities.\n\nFor all that I have said to this point, I am not worried about ISO 29119 or it's usage. If it gives people or teams a nice warm fuzzy feeling about their processes and methods then great, who am I to stand in their way? I don't expect people who wish to adopt the standard will give two hoots what my opinions are. They undoubtedly have reasons.\n\nAm I expecting ISO 29119 to have any major impact on me or the way my team works?\n<i>Not really</i>\n\nWill failure to adopt ISO 29119 provide limitations on the success of my team?\n<i>I highly doubt it</i>\n\nDo I feel threatened by ISO 29119?\n<i>Not even slightly</i>\n\nAm I against ISO 29119?\n<i>Absolutely not, each situation is different and one cannot over estimate the value of standardisation for the dynamics of some industries</i>\n\nI won't be signing any petition but I won't be introducing ISO 29119.\n\nThe splinters are starting to hurt so without further ado.\n\n\n![](/content/images/2014/Oct/World-s-Most-Funniest-Animals-Photos--8-.jpg) \n\n\n\n\n","html":"<p>I'm going to wade neck deep into the whole ISO 29119 debate; well maybe paddle around the edges. I'm also going to do something that is rare for me which is make my intentions clear right from the very start........... I'm not against ISO 29119!</p>\n\n<p>What...... that's blasphemy!</p>\n\n<p><img src=\"/content/images/2014/Oct/shock.jpg\" alt=\"\" title=\"\" /> </p>\n\n<p>You heard correctly I'm not against ISO 29119 however I have little use for it and have no intention of applying it any time soon.</p>\n\n<p>At the risk of getting splinters from perching on the fence I shall explain.</p>\n\n<p>I don't see any value for me in the ISO 29119 standards. I generally use value as an indicator on many things and ask my team to do the same. If something doesn't seem to be adding value then I expect it's continued usage to be challenged. The reason I don't see any value is ultimately because it doesn't tell me that someone is doing a good job or adding value with testing. In the same way ISQTB doesn't tell me that someone is able to apply what he or she know about testing in a practical way.</p>\n\n<p>I'll be honest....... if I see ISEB or ISQTB certification on a cv it does nothing for me. In fact if I'm honest it leaves me a little concerned.</p>\n\n<p>I don't particularly want my testers to try solving everything with a pre-determined idealistic methodology. I want them to be dynamic thinkers, able to adapt and challenge the software in new ways.</p>\n\n<p>Don't get me wrong I think structure and discipline are important skills for testers but only applied in the right way. Maybe I am driven by my experiences a little to much but in my experience I have found that the testers without any certification and any background in standards compliance have proved to be less constrained and more forward thinking.</p>\n\n<p>If I really want to put standards around the testing in my team I will identify and apply standards applicable to the needs of the business in line with our own priorities.</p>\n\n<p>For all that I have said to this point, I am not worried about ISO 29119 or it's usage. If it gives people or teams a nice warm fuzzy feeling about their processes and methods then great, who am I to stand in their way? I don't expect people who wish to adopt the standard will give two hoots what my opinions are. They undoubtedly have reasons.</p>\n\n<p>Am I expecting ISO 29119 to have any major impact on me or the way my team works? <br />\n<i>Not really</i></p>\n\n<p>Will failure to adopt ISO 29119 provide limitations on the success of my team? <br />\n<i>I highly doubt it</i></p>\n\n<p>Do I feel threatened by ISO 29119? <br />\n<i>Not even slightly</i></p>\n\n<p>Am I against ISO 29119? <br />\n<i>Absolutely not, each situation is different and one cannot over estimate the value of standardisation for the dynamics of some industries</i></p>\n\n<p>I won't be signing any petition but I won't be introducing ISO 29119.</p>\n\n<p>The splinters are starting to hurt so without further ado.</p>\n\n<p><img src=\"/content/images/2014/Oct/World-s-Most-Funniest-Animals-Photos--8-.jpg\" alt=\"\" title=\"\" /> </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1410272585341,"created_by":1,"updated_at":1412633710145,"updated_by":1,"published_at":1412632567374,"published_by":1},{"id":5,"uuid":"0e041097-7826-43a9-93ad-5e563d1b4722","title":"A Testers Bag of Tricks","slug":"a-testers-bag-of-tricks","markdown":"We all go to work every day carrying a bag under our arm. The bag has everything we could possibly need for every possible scenario we may encounter for our working day as a tester. Each time we encounter a problem we dive arm deep into the bag and pull out the solution to the problem. Right................? No? Just me then?\n\nIf someone really has got a bag with a solution to every problem in (and I'm not talking about a big bottle of Vodka) I'd love to hear from you.\n\nNow for the rest of us who don't have that we will just have to make do with what we have in our heads. What am I waffling on about?\n\nWell I guess I am trying to attach some realism to the daily life of testers. I am asking testers to be ambitious but flexible. To strive for better but solve the problem in front of them.\n\nI regularly read articles or listen to webcasts explaining how the latest new concept or tool in testing will revolutionise the way we test software. How we can automate every behaviour or every regression test? I have lost count of the times I am told that regression testing or GUI automation are prehistoric methods of testing and how anyone still engaging in such activities should catch up with modern software development techniques.\n\nBack in my university days I read a book (yes it was a long time ago but I can just about remember):\n\n>Software Testing In The Real World: Improving The Process\n<br>-Edward Kit\n\n![](/content/images/2014/Sep/index.jpg) \n\nI'm not suggesting you buy and read this book. It was written in 1995 and much of the content was based on available tools and development technologies of the time. It is quite frankly out of date. What does stick in my mind however is the general concept and ideals behind the decision making suggested by Ed. Some of this I understand much better today than I did when I read it, which is really no surprise as I was probably reading it after 4 or 5 pints in the union bar. The pragmatism of making decisions based on the way things are rather than how we would like them to be is likely to yield more success than trying to perfect everything first.\n\nTesters are working in all manner of teams and situations, from Greenfield to brownfield, from VB to Node.JS, from Web solutions to Excel Macros, from small local agile teams to large corporate test teams located across the world........ you get the point. So why then are people surprised when they attempt to implement something that has worked elsewhere without understanding why it has worked elsewhere?\n\nTesters have a wide variety tools and options available to solve different problems, and believe me they will have a wide variety of problems depending on the situation. \n\nI should add at this stage that when I talk about tools, I don't mean specifically 'testing tools'. I am generalising about everything that a tester may have access to and can be used to make a difference. These include processes, training, actual tools, testing techniques, other resources.\n\nWhat testers can do and should do is to really understand the situation they are in, fully understand what tools and options are available to them (look hard and do some serious research) and then look at what they can change or improve that will make a difference.........<u><b>NOT</b></u> what someone else in a completely different situation has changed to make a difference.\n\nProbably the worst thing a tester can do is to accept everything and not try to adapt and change. If you lose the ability to question things then are you losing the thing that makes you a good tester? Strive to become more efficient and to find better ways to improve software quality but do so in a way that works best in your situation!\n\nI'm not sure the level of humour in this post is nearly enough however in keeping with my previous posts please find the token random image:\n\n\n![](/content/images/2014/Sep/winston-1.jpg) \n\n","html":"<p>We all go to work every day carrying a bag under our arm. The bag has everything we could possibly need for every possible scenario we may encounter for our working day as a tester. Each time we encounter a problem we dive arm deep into the bag and pull out the solution to the problem. Right................? No? Just me then?</p>\n\n<p>If someone really has got a bag with a solution to every problem in (and I'm not talking about a big bottle of Vodka) I'd love to hear from you.</p>\n\n<p>Now for the rest of us who don't have that we will just have to make do with what we have in our heads. What am I waffling on about?</p>\n\n<p>Well I guess I am trying to attach some realism to the daily life of testers. I am asking testers to be ambitious but flexible. To strive for better but solve the problem in front of them.</p>\n\n<p>I regularly read articles or listen to webcasts explaining how the latest new concept or tool in testing will revolutionise the way we test software. How we can automate every behaviour or every regression test? I have lost count of the times I am told that regression testing or GUI automation are prehistoric methods of testing and how anyone still engaging in such activities should catch up with modern software development techniques.</p>\n\n<p>Back in my university days I read a book (yes it was a long time ago but I can just about remember):</p>\n\n<blockquote>\n  <p>Software Testing In The Real World: Improving The Process\n  <br>-Edward Kit</p>\n</blockquote>\n\n<p><img src=\"/content/images/2014/Sep/index.jpg\" alt=\"\" title=\"\" /> </p>\n\n<p>I'm not suggesting you buy and read this book. It was written in 1995 and much of the content was based on available tools and development technologies of the time. It is quite frankly out of date. What does stick in my mind however is the general concept and ideals behind the decision making suggested by Ed. Some of this I understand much better today than I did when I read it, which is really no surprise as I was probably reading it after 4 or 5 pints in the union bar. The pragmatism of making decisions based on the way things are rather than how we would like them to be is likely to yield more success than trying to perfect everything first.</p>\n\n<p>Testers are working in all manner of teams and situations, from Greenfield to brownfield, from VB to Node.JS, from Web solutions to Excel Macros, from small local agile teams to large corporate test teams located across the world........ you get the point. So why then are people surprised when they attempt to implement something that has worked elsewhere without understanding why it has worked elsewhere?</p>\n\n<p>Testers have a wide variety tools and options available to solve different problems, and believe me they will have a wide variety of problems depending on the situation. </p>\n\n<p>I should add at this stage that when I talk about tools, I don't mean specifically 'testing tools'. I am generalising about everything that a tester may have access to and can be used to make a difference. These include processes, training, actual tools, testing techniques, other resources.</p>\n\n<p>What testers can do and should do is to really understand the situation they are in, fully understand what tools and options are available to them (look hard and do some serious research) and then look at what they can change or improve that will make a difference.........<u><b>NOT</b></u> what someone else in a completely different situation has changed to make a difference.</p>\n\n<p>Probably the worst thing a tester can do is to accept everything and not try to adapt and change. If you lose the ability to question things then are you losing the thing that makes you a good tester? Strive to become more efficient and to find better ways to improve software quality but do so in a way that works best in your situation!</p>\n\n<p>I'm not sure the level of humour in this post is nearly enough however in keeping with my previous posts please find the token random image:</p>\n\n<p><img src=\"/content/images/2014/Sep/winston-1.jpg\" alt=\"\" title=\"\" /> </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1410349137321,"created_by":1,"updated_at":1410357285817,"updated_by":1,"published_at":1410357285819,"published_by":1},{"id":6,"uuid":"aff74e14-ae7c-44db-8505-fec70f414e27","title":"Test First...... Why?","slug":"testing-analysis","markdown":"I'll get straight to the point, why should we think about a test first approach? \n\nWith my glass half full hat on I'll ask another question............ why shouldn't we consider a test first approach?\n\nWhat do I actually mean by test first?\n\n- A common team understanding of what is being asked for by the end user before we start development\n- Reflection of what is being asked for by the end user in the form of acceptance tests\n-\tEnsuring the acceptance tests are reflected in any development work completed (this could be unit tests, integration tests, behavioural tests or just developer testing his code manually)\n\nThere can be a lot more to test first but for simplicity I'll leave it at that.\n\nI often hear some or all of the following questions/statements from people arguing against a test first approach.\n\n<b>It slows development down!</b>\nDoes it really? If you consider rework and bug fixing as part of development, is elapsed time really longer or are we losing any time gained at the start by increasing the risk of a rework/bug fix tail?\n\n<b>It's BA's/Product Owners who are responsible for defining what is developed.</b>\nActually it's the BA/Product Owners job to effectively interpret the customer wants or needs into product behaviour. But it's the whole team who are responsible for turning that behaviour into a product experience. If you are unable to represent the required behaviour in tests (Whether that is due to lack of clarity, lack of clarity or something else) how can you possibly know you are building the correct behaviour into the product? I actually believe that there is a lot of cross over between the BA/Product Owner role and the test role in terms of understanding of the system.\n\n<b>We need to know how it is going to be developed/what it looks like to be able to write tests.</b>\nWhy do you need to know how something is going to be developed in order to write tests. This kind of question leads me to believe you are writing the wrong tests. Don't get me wrong I've worked in teams who get little to no requirements. I've written tests by clicking around the software. Let’s be honest, if as a tester you don't fully understand the expected behaviour before you see the software how can you possibly know whether the software fully reflects the expected behaviour?\n\n<b>So what benefit does test first really give us?</b> \nHopefully I've already answered some points already but I'll give you what I believe to be the most important benefits\n\n- A better quality product as a result of: \n\t- Reduced rework, particularly rework resulting in misunderstanding of expected behaviour. If the developer understands what tests are going to be run against the behaviour of the product there is little excuse for getting it wrong (Human error may still happen but is less likely).\n\t- Better post development testing, as a result of testers spending less time finding, raising and re-testing things that could have been avoided. This time can be invested into really analysing the software and challenging it's boundaries. A greater understanding of what the customer wants allows the tester to make more informed decisions around what testing they feel is most effective.\n\t- More effective development. Developers spending less time trying to understand the requirements allows them to spend more time understanding the best way to develop the requirements.\n- Support for the BA/Product Owner - Understanding how we can test behaviour drives out questions, questions drive out answers and answers to questions provide a more complete picture of a requirement/story/change. I prefer stories and requirements that are a little more lightweight and stick to what the customer wants. The questions driven out within the team will then flesh the detail out.\n- Lower costs. It's well known that the cost of issues and changes to the product, as you get further through the product delivery, becomes higher. The more issues caught early before or during development, the less likelihood of finding issues later post development (in test, or by the customer) and therefore the lower the cost of the delivery.\n- More effective team working. Getting people more involved earlier allows discussions within the team that might otherwise have happened to late or not at all. The inclusive approach that is driven out only helps a team dynamic.\n- Behavioural Driven Development (BDD) techniques. Test first supports the aforementioned development approach. Identifying and understanding tests around the expected behaviour of the software allows testers or developers to write a test framework around the code they are developing which gives immediate feedback on where the software is not meeting expected behaviour. The result is greater confidence within the team that the correct product is being developed.\n\nThe important thing to remember in all of this is that test first is not supposed to be a rigid approach. It is simply about understanding the behaviours of the products that we want to test for before jumping head first into developing the product. How you go about implementing test first is entirely dependent on your situation and should work with you rather than against you.\n\nI find myself reading this post and worrying that I am slowly losing my sense of humour (If you could call it that).\n\nIn light of this overly direct post I will leave you with a reflective and thought provoking picture.\n\n![](/content/images/2014/Sep/IMG_0862-2.JPG)                              \n\n\n\n","html":"<p>I'll get straight to the point, why should we think about a test first approach? </p>\n\n<p>With my glass half full hat on I'll ask another question............ why shouldn't we consider a test first approach?</p>\n\n<p>What do I actually mean by test first?</p>\n\n<ul>\n<li>A common team understanding of what is being asked for by the end user before we start development</li>\n<li>Reflection of what is being asked for by the end user in the form of acceptance tests</li>\n<li>Ensuring the acceptance tests are reflected in any development work completed (this could be unit tests, integration tests, behavioural tests or just developer testing his code manually)</li>\n</ul>\n\n<p>There can be a lot more to test first but for simplicity I'll leave it at that.</p>\n\n<p>I often hear some or all of the following questions/statements from people arguing against a test first approach.</p>\n\n<p><b>It slows development down!</b> <br />\nDoes it really? If you consider rework and bug fixing as part of development, is elapsed time really longer or are we losing any time gained at the start by increasing the risk of a rework/bug fix tail?</p>\n\n<p><b>It's BA's/Product Owners who are responsible for defining what is developed.</b> <br />\nActually it's the BA/Product Owners job to effectively interpret the customer wants or needs into product behaviour. But it's the whole team who are responsible for turning that behaviour into a product experience. If you are unable to represent the required behaviour in tests (Whether that is due to lack of clarity, lack of clarity or something else) how can you possibly know you are building the correct behaviour into the product? I actually believe that there is a lot of cross over between the BA/Product Owner role and the test role in terms of understanding of the system.</p>\n\n<p><b>We need to know how it is going to be developed/what it looks like to be able to write tests.</b> <br />\nWhy do you need to know how something is going to be developed in order to write tests. This kind of question leads me to believe you are writing the wrong tests. Don't get me wrong I've worked in teams who get little to no requirements. I've written tests by clicking around the software. Let’s be honest, if as a tester you don't fully understand the expected behaviour before you see the software how can you possibly know whether the software fully reflects the expected behaviour?</p>\n\n<p><b>So what benefit does test first really give us?</b> <br />\nHopefully I've already answered some points already but I'll give you what I believe to be the most important benefits</p>\n\n<ul>\n<li>A better quality product as a result of: \n<ul><li>Reduced rework, particularly rework resulting in misunderstanding of expected behaviour. If the developer understands what tests are going to be run against the behaviour of the product there is little excuse for getting it wrong (Human error may still happen but is less likely).</li>\n<li>Better post development testing, as a result of testers spending less time finding, raising and re-testing things that could have been avoided. This time can be invested into really analysing the software and challenging it's boundaries. A greater understanding of what the customer wants allows the tester to make more informed decisions around what testing they feel is most effective.</li>\n<li>More effective development. Developers spending less time trying to understand the requirements allows them to spend more time understanding the best way to develop the requirements.</li></ul></li>\n<li>Support for the BA/Product Owner - Understanding how we can test behaviour drives out questions, questions drive out answers and answers to questions provide a more complete picture of a requirement/story/change. I prefer stories and requirements that are a little more lightweight and stick to what the customer wants. The questions driven out within the team will then flesh the detail out.</li>\n<li>Lower costs. It's well known that the cost of issues and changes to the product, as you get further through the product delivery, becomes higher. The more issues caught early before or during development, the less likelihood of finding issues later post development (in test, or by the customer) and therefore the lower the cost of the delivery.</li>\n<li>More effective team working. Getting people more involved earlier allows discussions within the team that might otherwise have happened to late or not at all. The inclusive approach that is driven out only helps a team dynamic.</li>\n<li>Behavioural Driven Development (BDD) techniques. Test first supports the aforementioned development approach. Identifying and understanding tests around the expected behaviour of the software allows testers or developers to write a test framework around the code they are developing which gives immediate feedback on where the software is not meeting expected behaviour. The result is greater confidence within the team that the correct product is being developed.</li>\n</ul>\n\n<p>The important thing to remember in all of this is that test first is not supposed to be a rigid approach. It is simply about understanding the behaviours of the products that we want to test for before jumping head first into developing the product. How you go about implementing test first is entirely dependent on your situation and should work with you rather than against you.</p>\n\n<p>I find myself reading this post and worrying that I am slowly losing my sense of humour (If you could call it that).</p>\n\n<p>In light of this overly direct post I will leave you with a reflective and thought provoking picture.</p>\n\n<p><img src=\"/content/images/2014/Sep/IMG_0862-2.JPG\" alt=\"\" title=\"\" />                              </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1410440121689,"created_by":1,"updated_at":1431419313451,"updated_by":1,"published_at":1411650738702,"published_by":1},{"id":7,"uuid":"78206832-bf43-4cde-b41e-26f230bc166d","title":"When is testing not really testing?","slug":"is-script-execution-really-testing","markdown":"By testing I really mean checking. I've long championed a view that testing as a reference in software development is misused. Not always I might add but a little too often. \n\nA recent discussion with a colleague around test/quality role capabilities raised this very issue again and prompted me to take to the keyboard for clarity of thought.\n\n\"Surely it's just semantics\" you might say or maybe \"you are just being pedantic\". Well actually no. It is, in my opinion, the key to really understanding the value and role of both 'testing' and 'checking' in software and subsequently a doorway to becoming a more effective/valuable team member. It also helps understanding of the value and limitations of test tooling.\n\nIt is a widely discussed topic within the testing community. The revered James Bach and Michael Bolton have written a number of blog posts and articles discussing as well as building it into the 'Rapid Software Testing' methodology.\n\nThe article that really reminded me of the importance of this question is a ThoughtWorks article by Rouan Wilsenach passed to me by my aforementioned colleague.\nhttps://www.thoughtworks.com/insights/blog/qa-dead\n\n\n\nThis article discusses the role of a 'tester' in a modern software development team and the why really understanding your role and what value you can bring to the team is so important.\n\nI have regularly had discussions with people suggesting that to be an effective tester one must be engaged in automation or writing unit tests. Sometimes those discussions insist a need to be able to write tests in Python, Ruby <replace with language of choice as appropriate>. I don't disagree that these skills are \"advantageous\" and can help engage in certain team activities however this in itself does not enable a tester. The ability of a person to understand a product and subsequently challenge that product are what really enables a tester. The ability to understand what is being asked for in features and then think 'but what if.........' enables a tester. \n\nWhy is that?\n\nPut simply, automation (code, UI or otherwise) can only <b>CHECK</b> what it is told to <b>CHECK</b>. That isn't going to change until AI really is AI. In a 'cross functional' development team I would expect an abundance of technical ability and people ready to write code. What a team really needs to ask itself is whether it has people with the ability to challenge what is being asked for, challenge the team, challenge the product, ask all the 'what if.......' questions, to find flaws from concept to completion where others wouldn't. In other words, does your team have someone who can really <b>TEST</b> the product.\n\nSimilarly I am fully aware that the world still has many software delivery teams that throw software over an invisible fence to test and expect testers to run through a plethora of functional test scripts to say it’s all ok. Again I would emphasise that what is actually being done is <b>CHECKING</b> that something works how we think it should work. I'm not suggesting this is necessarily a bad thing (although I would question whether there is a more effective way of doing that checking), however the actual art of <b>TESTING</b> comes in how we come up with those scripts. Are you really trying to understand and challenge the product/change or just tick a box to <b>CHECK</b> something works as expected.\n\nBy all means check things are working regularly but ensure you are really testing the product right from inception first.\n\nIt might appear to be a subtle variation but understanding the value of testing versus checking and how they/you can ultimately add the most value to your team should lead to a much brighter and happier place.\n\nI'll leave you with a self portrait!\n![](/content/images/2015/Oct/Beaker.jpg)","html":"<p>By testing I really mean checking. I've long championed a view that testing as a reference in software development is misused. Not always I might add but a little too often. </p>\n\n<p>A recent discussion with a colleague around test/quality role capabilities raised this very issue again and prompted me to take to the keyboard for clarity of thought.</p>\n\n<p>\"Surely it's just semantics\" you might say or maybe \"you are just being pedantic\". Well actually no. It is, in my opinion, the key to really understanding the value and role of both 'testing' and 'checking' in software and subsequently a doorway to becoming a more effective/valuable team member. It also helps understanding of the value and limitations of test tooling.</p>\n\n<p>It is a widely discussed topic within the testing community. The revered James Bach and Michael Bolton have written a number of blog posts and articles discussing as well as building it into the 'Rapid Software Testing' methodology.</p>\n\n<p>The article that really reminded me of the importance of this question is a ThoughtWorks article by Rouan Wilsenach passed to me by my aforementioned colleague. <br />\n<a href='https://www.thoughtworks.com/insights/blog/qa-dead'>https://www.thoughtworks.com/insights/blog/qa-dead</a></p>\n\n<p>This article discusses the role of a 'tester' in a modern software development team and the why really understanding your role and what value you can bring to the team is so important.</p>\n\n<p>I have regularly had discussions with people suggesting that to be an effective tester one must be engaged in automation or writing unit tests. Sometimes those discussions insist a need to be able to write tests in Python, Ruby <replace with language of choice as appropriate>. I don't disagree that these skills are \"advantageous\" and can help engage in certain team activities however this in itself does not enable a tester. The ability of a person to understand a product and subsequently challenge that product are what really enables a tester. The ability to understand what is being asked for in features and then think 'but what if.........' enables a tester. </p>\n\n<p>Why is that?</p>\n\n<p>Put simply, automation (code, UI or otherwise) can only <b>CHECK</b> what it is told to <b>CHECK</b>. That isn't going to change until AI really is AI. In a 'cross functional' development team I would expect an abundance of technical ability and people ready to write code. What a team really needs to ask itself is whether it has people with the ability to challenge what is being asked for, challenge the team, challenge the product, ask all the 'what if.......' questions, to find flaws from concept to completion where others wouldn't. In other words, does your team have someone who can really <b>TEST</b> the product.</p>\n\n<p>Similarly I am fully aware that the world still has many software delivery teams that throw software over an invisible fence to test and expect testers to run through a plethora of functional test scripts to say it’s all ok. Again I would emphasise that what is actually being done is <b>CHECKING</b> that something works how we think it should work. I'm not suggesting this is necessarily a bad thing (although I would question whether there is a more effective way of doing that checking), however the actual art of <b>TESTING</b> comes in how we come up with those scripts. Are you really trying to understand and challenge the product/change or just tick a box to <b>CHECK</b> something works as expected.</p>\n\n<p>By all means check things are working regularly but ensure you are really testing the product right from inception first.</p>\n\n<p>It might appear to be a subtle variation but understanding the value of testing versus checking and how they/you can ultimately add the most value to your team should lead to a much brighter and happier place.</p>\n\n<p>I'll leave you with a self portrait! <br />\n<img src=\"/content/images/2015/Oct/Beaker.jpg\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1410440227349,"created_by":1,"updated_at":1444998972025,"updated_by":1,"published_at":1444998972026,"published_by":1},{"id":8,"uuid":"3c022929-9640-415f-b51c-7a5ac73c02cd","title":"What is quality?","slug":"what-is-quality-really","markdown":"","html":"","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1422938819378,"created_by":1,"updated_at":1423046375792,"updated_by":1,"published_at":null,"published_by":null},{"id":9,"uuid":"923b5e2c-7fb2-438d-b452-d02161f25f66","title":"Testing......where is the excitement?","slug":"testing-wheres-the-excitement","markdown":"It's been a while. No excuses I've just struggled to make the time to stop and think. So I find myself with many months worth of thoughts all gathered in chaos in my head. I'll apologise in advance if this post comes out a little chaotic.\nThis may come across a little like I'm Microsoft bashing but that's not my intention at all. Basically a simple trip down to the Microsoft dev briefing with a few colleagues brought a number of 'things' that have been frustrating me recently into focus. I attended the dev briefing, maybe a little naively, with a positive mind-set and the intention of bringing some learning’s back with me, despite the cynicism of one of my colleagues. The dev briefing was billed as an on stage demonstration of rapid software development and software development practices.\n\nSo we all know Microsoft love to demo new tech right? But they went to great lengths to sell the fact that this would be an effective lifecycle on stage, hell they even had an Agile and a Quality guy in the line-up.\nTo these ends I was to be disappointed - The 'Agile guy' focused much of his time on a demo of the Visual Studio Online built in kanban board and the 'Quality guy' suddenly became the 'Dev ops guy' with much of the focus on dev ops technology for deployment quality. \n\nI'll be brutally honest and say that after the 'Agile guy' had finished, having barely touched on the real value of Agile practises and with no hint of discussing the value/importance of interpreting the ask into stories and acceptance criteria, I found myself taking to twitter with more than a smattering of my own cynicism. We'd done the 'Agile guy' and I had yet to actually pick up what they were intending to build. \n\nI'll spare you the details but the tone of the day didn't get much better from a 'demonstration of effective software development on stage' perspective. That's not to say that the day was boring, far from it. They demonstrated some interesting tech and development concepts but it really did feel like a series of product and technology demo's as opposed to a joined up development cycle.\n\nWhen they introduced the 'Quality guy' as the 'Dev ops guy' I'll be honest, my mind drifted. Useful stuff but I found myself questioning why they had either chosen to or found difficult, bringing quality and test to the forefront of a demonstration of software development, after all we live in a world of test and behavioural driven development. \n\n1) Was it the fact that the audience were overwhelmingly developers (only three hands including my own went up when they asked how many testers were in present)? \n\n2) Was it because Microsoft were pushing an Agenda around technology and tooling and nothing new and ground breaking had come from Microsoft in the test/quality arena recently? \n\n3) Was it just that quality and testing disciplines don't excite people, let alone a room full of developers?\n\n4) Is the importance of quality practices, test first thinking and discipline in modern development still so widely misunderstood?\n\nThis started me thinking about recent examples where I have found myself increasingly frustrated at a lack of willingness from developers (not to tar all developers with the same brush) to embrace quality and testing as additional strings to their development bow. What has seemed, at times, like a complete failing to really challenge themselves to become more rounded developers, writing more cohesive and stable code by merely getting more involved in quality and test thinking.\n\nThe combination of moments of frustration culminating in what I perceived (rightly or wrongly) to be the behemoth that is Microsoft 'avoiding' quality and test, makes me wonder whether this frustrating minority, really are a minority. I'm not suggesting test experts no longer have a place, that place has merely shifted towards quality as a whole rather than specifically test. But why, despite all of the evidence telling us how embracing testing practices into software development only proves to enhance the quality of code written, do so many developers still see testing as menial and degrading?\n\nI’d love to say I know the answer. Right now I’m frustrated however I hope to channel that frustration into looking at new ways to engage developers to help them to understand and embrace quality and test rather than looking on it with suspicion.\n\nLittle quiz to end the post..... Who can tell me where the below picture is taken?\n![](/content/images/2015/May/Photo-0023.jpg)\n\n","html":"<p>It's been a while. No excuses I've just struggled to make the time to stop and think. So I find myself with many months worth of thoughts all gathered in chaos in my head. I'll apologise in advance if this post comes out a little chaotic. <br />\nThis may come across a little like I'm Microsoft bashing but that's not my intention at all. Basically a simple trip down to the Microsoft dev briefing with a few colleagues brought a number of 'things' that have been frustrating me recently into focus. I attended the dev briefing, maybe a little naively, with a positive mind-set and the intention of bringing some learning’s back with me, despite the cynicism of one of my colleagues. The dev briefing was billed as an on stage demonstration of rapid software development and software development practices.</p>\n\n<p>So we all know Microsoft love to demo new tech right? But they went to great lengths to sell the fact that this would be an effective lifecycle on stage, hell they even had an Agile and a Quality guy in the line-up. <br />\nTo these ends I was to be disappointed - The 'Agile guy' focused much of his time on a demo of the Visual Studio Online built in kanban board and the 'Quality guy' suddenly became the 'Dev ops guy' with much of the focus on dev ops technology for deployment quality. </p>\n\n<p>I'll be brutally honest and say that after the 'Agile guy' had finished, having barely touched on the real value of Agile practises and with no hint of discussing the value/importance of interpreting the ask into stories and acceptance criteria, I found myself taking to twitter with more than a smattering of my own cynicism. We'd done the 'Agile guy' and I had yet to actually pick up what they were intending to build. </p>\n\n<p>I'll spare you the details but the tone of the day didn't get much better from a 'demonstration of effective software development on stage' perspective. That's not to say that the day was boring, far from it. They demonstrated some interesting tech and development concepts but it really did feel like a series of product and technology demo's as opposed to a joined up development cycle.</p>\n\n<p>When they introduced the 'Quality guy' as the 'Dev ops guy' I'll be honest, my mind drifted. Useful stuff but I found myself questioning why they had either chosen to or found difficult, bringing quality and test to the forefront of a demonstration of software development, after all we live in a world of test and behavioural driven development. </p>\n\n<p>1) Was it the fact that the audience were overwhelmingly developers (only three hands including my own went up when they asked how many testers were in present)? </p>\n\n<p>2) Was it because Microsoft were pushing an Agenda around technology and tooling and nothing new and ground breaking had come from Microsoft in the test/quality arena recently? </p>\n\n<p>3) Was it just that quality and testing disciplines don't excite people, let alone a room full of developers?</p>\n\n<p>4) Is the importance of quality practices, test first thinking and discipline in modern development still so widely misunderstood?</p>\n\n<p>This started me thinking about recent examples where I have found myself increasingly frustrated at a lack of willingness from developers (not to tar all developers with the same brush) to embrace quality and testing as additional strings to their development bow. What has seemed, at times, like a complete failing to really challenge themselves to become more rounded developers, writing more cohesive and stable code by merely getting more involved in quality and test thinking.</p>\n\n<p>The combination of moments of frustration culminating in what I perceived (rightly or wrongly) to be the behemoth that is Microsoft 'avoiding' quality and test, makes me wonder whether this frustrating minority, really are a minority. I'm not suggesting test experts no longer have a place, that place has merely shifted towards quality as a whole rather than specifically test. But why, despite all of the evidence telling us how embracing testing practices into software development only proves to enhance the quality of code written, do so many developers still see testing as menial and degrading?</p>\n\n<p>I’d love to say I know the answer. Right now I’m frustrated however I hope to channel that frustration into looking at new ways to engage developers to help them to understand and embrace quality and test rather than looking on it with suspicion.</p>\n\n<p>Little quiz to end the post..... Who can tell me where the below picture is taken? <br />\n<img src=\"/content/images/2015/May/Photo-0023.jpg\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1430944641502,"created_by":1,"updated_at":1431419477435,"updated_by":1,"published_at":1430950926073,"published_by":1},{"id":10,"uuid":"7cb53204-7cd2-4776-b974-9e0a88496764","title":"Automation - The Saviour?","slug":"automation-the-saviour","markdown":"So you want to automate your testing to solve all of your testing woes? Because automated tests will suddenly do the work of 200 testers in a few hours right?\n\nWell not quite. There are many things to consider and understand if you really want to make the right decision on automation for your team. Investing in test automation has a cost and this cost can get higher if you don't really understand what you are getting into. That said test automation can bring a lot of value and the aim of anyone investing in test automation is to ensure the value you get is higher than the cost. This is by no means an exhaustive list and I don't profess to be an expert. This is however based on a lot of experience (both positive and negative) and the result of lots of dead ends and soul searching.\n\n1) The first thing I would encourage you to consider is what automated tests you want. Think about the how quickly you want your tests to give you pass/fail feedback. Unit tests and code based testing will give you the quickest feedback loop as they can be run every time code is checked in. In my experience I would encourage any team to have a target of getting as much of your automated testing into the code as possible. If you have a challenge doing this for any one of a million reasons then re-consider again and again looking at ways you can get your code into a suitable state to write code based tests against. If you can find a way of achieving this as early as possible you will save yourself a lot of pain. \nIf you hit a brick wall and feel that an automated testing tool (non code based tests) are your only option for some of the testing (there can be a number of reasons for this such as state of code if it's been developed over a number of years or a lot of logic sitting in the UI layer) then look at whether your product has API's or endpoints you can hook into? If you can automate avoiding the UI then you should for the majority of your tests as you will avoid a lot of maintenance overhead when the product changes (which it inevitably will). Use the testing triangle below as a guide to how much of your testing should be covered where. In the below triangle the cost of testing goes up the higher up the triangle you go but the coverage is higher towards the bottom.\n![](/content/images/2016/Mar/testingtriangle1.png)\n\nUI automation can still be valuable and can give a better user representation in some cases. If you are absolutely adamant you need UI automation, keep it to thin stripes through the product and avoid XY co-ordinates for actions, hopefully therefore ensuring minimal susceptibility to changes in the software.\nAlso consider what the tests are testing for. Automated testing might apply to performance and load and therefore you need to look at it from a slightly different angle. For load tests in particular you will generally be looking at specialised tools to build the load using agents/virtual users or similar. The question becomes more about how important these tests are for you. Will your software ever get really heavy load or will understand performance for a single user be enough.\nMost importantly of all, just because you may not be writing code based automated tests, remember the golden rule about feedback and aim to make the testing feedback loop as quickly as possible. \nEven in a UI automation world keep your tests as small as possible and run them as often as possible against a controlled and repeatable environment. Start from having them on a continuous loop (picking up the latest build and running again as soon as they finish) and work backwards. If having them running continuously isn't possible can they run twice a day, overnight and then as an absolute worst case scenario, weekly.\nBy running them as often as possible you are doing two things:\n\n* Keeping the feedback loop of the tests as quick as possible\n* Making the tests easier to maintain (if a valid change to the software causes the tests to break and hasn't been identified up front, a smaller time between running the tests gives you a smaller window of changes that could have broken the tests)\n\n2) You need to understand that automated testing is really just automated checking. It will only check what you tell it to check and is only as good as the checks you identify. It isn't going to suddenly transform your testing if you aren't already able to find the best way of testing your product manually. I know many would disagree and would consider it waste however I think where possible you should only automate what you have already defined as manual tests, validating expected product behaviour. Having appropriate manual tests for all of your automated tests is a good reference point for what the test is trying to prove, particularly if you have different people picking up and putting down the tests for execution or maintenance. Let's be honest writing code blindly without fully understanding the users requirement is a bad idea whether that is for test or development purposes. Having clear behavioural tests will also help you to avoid automating tests against how the functionality is rather than against the expected behaviour. A test failing should get you to question the product not question the test therefore having confidence that the tests represent a customer's expectations/requirements is massively important if you want to avoid regular arguments about the tests or potentially even worse, people establishing apathy towards tests and just ignoring them.\n\n3) Ownership of tests is a big consideration for anyone considering automated testing. Consider carefully how you work. Do you have or are you aiming for a continuous integration/continuous delivery model? If you are then consider how tests will fit into your delivery pipeline and therefore how long they will take to run. More importantly consider if the tests look to be broken who do you want to fix them, what their availability is and how long will it take. Working in Agile teams in a continuous integration/delivery environment you need the team to have the ability to identify and solve any problem that comes up. In a short iteration or in single piece flow/WIP limit practices you really don't want to be waiting on other teams to fix the tests or update the tests in line with changes made. All of that said, getting a team to take ownership of something written by a completely separate group without fully understanding the goals or having inputted into how it was written is a big challenge. Where you really want to be is that appropriate tests are part of the deliverable from a team giving them confidence and understanding of the tests and therefore increasing the value (or perceived value) of your tests in the delivery pipeline).\n\n-\tBut we barely have time to do the development work in the timescales without writing the automated tests as well!\n\n\nIf the tests (checks) are necessary then they need to be done somewhere before you can release the software to get any value out of the changes you are making. If you aren't automating them then you are testing them manually and if the area of the software is high impact and/or high risk then you are probably going to be changing and therefore testing this on a regular basis. That can add up to high cost of test (see the test triangle) to do basic checks that automation can do. It is also reducing the time your testers could spend working with the team and helping to build quality in or completing valuable 'testing' that automation can't perform. Maybe planning in time for test automation isn't such a high expense after all, especially if you are creating code based tests.\n\n-\tBut I'm a developer, it's not my job to write tests\n\nI'm not even going to justify this with a response. It's your job to get software that is fit for purpose to customers.\n    \nThere may still be reasons within your control or outside of your control that mean having automation created by a separate team is absolutely desirable/necessary. If this is the case it doesn't mean all ownership must be lost, it just means the teams need to work a little harder and be a little more disciplined on communication. Consider treating the automated tests as software in their own right. Get the team delivering the product/changes sitting down with those writing the tests to agree the deliverables, aim of the tests and approach to writing the tests. Maybe get regular touch points between the two groups to discuss progress and get sight of the automated tests being written allowing input and suggestions from both sides to be discussed. Look at implementing code reviews by the product development team over the automated tests being created on a regular basis. This will all increase the chances of the automated testing being co-owned by the two teams and increase the pool of people able and willing to maintain the tests.\n\n4) Understanding the tooling options and what best fits your needs is vital. Failure to do due diligence on this and really understand the previous points before committing to a given tool and approach can send you steaming down a route that eventually hits a wall or needs to change which then leaves you with large numbers of assets (created at a large cost). These assets either become unusable or need extra effort to transfer. Alternatively you could find yourself with high licensing costs for software that sits on the shelf because you can't find a way of introducing it without breaking delivery. \nAssuming you have given careful consideration to all of the previous points and have;\n\n  -    decided how much testing you can do in the code (based on how you are developing software or want to develop software),  \n  -   ensured you are clear on how you are going to provide traceability/understanding of tests you want to automate\n  -\thave a clear view of who will own, maintain and execute the tests,\n  \nthen you need to find a tool that fits your need.\nThere will always be pro's and con's to any tool you decide to use so don't go looking for perfection or you are likely to end up disappointing. Below are a few categories and examples to consider:\n\n*Code based test automation*\n\nMore frameworks than tools, to allow unit tests built into the code to be executed and the results presented back. Building unit tests into your development activity is a highly (relatively) technical skillset and an understanding of how to pass inputs in and assess outputs through the code base is needed. Stubs, object mocks and test harnesses are useful options to help control the test inputs and outputs. Getting value out of unit testing (as opposed to just having tests in the code for the sake of it) is something often missed. \nTest Driven Development and Behavioural Driven Development are test first methodologies aimed at identifying tests up front, writing the tests which initially break/fail and then developing the solution to ensure the tests pass. As already identified code based tests have the value of minimal overhead (you are already developing the product so adding extra code to test the product up front is a much cheaper overhead than trying to write tests after the fact), high coverage and fast feedback (tests being run on every check in of code).\nCommon test frameworks include:\n\nArguably the most common framework for code based testing is the x-unit family (N-Unit, J-Unit, Fs-Unit etc.) although alternative frameworks are becoming more common, for example those delving into the world of the MEAN Stack are likely to be picking up Jasmine or you may be using/want to look at something like TestNG.\n          \n\n*API/Integration test automation*\n\nThe aim of integration tests is to orchestrate integration of different components of the software and ensure they all hang together effectively. If your software/web service has a strong service layer you can benefit from testing this through the service layer and interacting with the API rather than relying on the User Interface. Integration tests will generally rely on completion and build of a component as opposed to executing on check in therefore the feedback loop will be longer than code based tests however the improved stability due to not needing to rely on the User Interface and the speed of execution due to interacting with the service layer (no dependency on screen loads, or object states) means integration tests are much more suited to a continual integration/delivery environment than ui automation and depending on the service layer available in your software can potentially give you as much confidence of the End to End stability.\n\nEssentially Integration tools can be anything from the x-unit or TestNG frameworks to more dedicated testing tools such as LDRA, Citrus or Robot framework. Even tools like Selenium (whilst not ideal) can be setup to test against the api but need to be hooked into a framework such as TestNG or Robot.\n\n\n*UI test automation*\n\nYou may have already noticed my reluctance to use UI automation however I'd be lying if I said I hadn't previously made the decision to go down the UI automation route. UI automation essentially interacts with the objects in the UI and provides the most realistic user representation testing but suffers from flakiness associated with object recognition, waiting on objects, return values or task completion. Understanding the flaws (already discussed) in relation to ownership, regular test execution, size of the tests and control over the environment and data can help you derive value from UI automation testing especially if you have software with a limited/non-existent service layer or a large amount of business logic in the UI. Also automation ID's can be put into the UI layer to help with interaction but whilst they help don't expect them to be a silver bullet.\n\nUI Automation test tooling has a variety of options for all budgets if you have a web based product. These include open source tooling such as selenium, Robot and Watir to proprietary solutions with a higher cost such as Ranorex, Test Complete (Smartbear) or HP's unified functional tester (formerly Quick Test Professional). If you are testing a web product and decide you need to test against the UI then I would be surprised if you can find many reasons to pay for proprietary testing software as opposed to making Selenium work for you.\nIf you are working against a desktop application then you are a little more restricted. The proprietary options are pretty much similar with HP UFT, Test Complete and Egg Plant leading the way and providing broadly similar capability but varying price points. Robot Framework (with the autoit library) is worth consideration from the open source pot or alternatively if you are a Microsoft house with .net framework based products you may have a couple of options dependant on your licencing. CodedUI has the benefit of feeding into the Microsoft performance test capabilities. TestStack White should also be considered if you are working with .net framework and can also be used in conjunction with CodedUI as it is built on top of Microsoft's UIAutomation library. I have found this to be an option that helps with the ownership consideration and receives a much better reception if you want developers to be part of the UI test automation solution.\n\n\n\n**What Now?**\n\nAs stated previously this is not meant as a guide to follow, these are just some of my own thoughts. You will come across a broad spectrum of opinions on use of automated testing and I would suggest anyone looking to get value out of automation does their own research and considers a variety of information. So many factors will influence what test automation is best suited to you, your team, your product and your situation and at the end of the day only you understand those factors fully, Don't go into test automation half-heartedly. Be prepared to invest continually into making it a success, adapt to challenges you encounter and getting everyone on board with building it into your planning and delivery. Encourage a mindset that if a test is broken you either fix the test or the code but never ignore it. Don't be afraid to find ways to change and improve to get the most out of test automation but build your test automation on the foundations of quickest possible test feedback, testing early and testing often.\n![](/content/images/2016/Mar/images--2-.jpg)","html":"<p>So you want to automate your testing to solve all of your testing woes? Because automated tests will suddenly do the work of 200 testers in a few hours right?</p>\n\n<p>Well not quite. There are many things to consider and understand if you really want to make the right decision on automation for your team. Investing in test automation has a cost and this cost can get higher if you don't really understand what you are getting into. That said test automation can bring a lot of value and the aim of anyone investing in test automation is to ensure the value you get is higher than the cost. This is by no means an exhaustive list and I don't profess to be an expert. This is however based on a lot of experience (both positive and negative) and the result of lots of dead ends and soul searching.</p>\n\n<p>1) The first thing I would encourage you to consider is what automated tests you want. Think about the how quickly you want your tests to give you pass/fail feedback. Unit tests and code based testing will give you the quickest feedback loop as they can be run every time code is checked in. In my experience I would encourage any team to have a target of getting as much of your automated testing into the code as possible. If you have a challenge doing this for any one of a million reasons then re-consider again and again looking at ways you can get your code into a suitable state to write code based tests against. If you can find a way of achieving this as early as possible you will save yourself a lot of pain. <br />\nIf you hit a brick wall and feel that an automated testing tool (non code based tests) are your only option for some of the testing (there can be a number of reasons for this such as state of code if it's been developed over a number of years or a lot of logic sitting in the UI layer) then look at whether your product has API's or endpoints you can hook into? If you can automate avoiding the UI then you should for the majority of your tests as you will avoid a lot of maintenance overhead when the product changes (which it inevitably will). Use the testing triangle below as a guide to how much of your testing should be covered where. In the below triangle the cost of testing goes up the higher up the triangle you go but the coverage is higher towards the bottom. <br />\n<img src=\"/content/images/2016/Mar/testingtriangle1.png\" alt=\"\" /></p>\n\n<p>UI automation can still be valuable and can give a better user representation in some cases. If you are absolutely adamant you need UI automation, keep it to thin stripes through the product and avoid XY co-ordinates for actions, hopefully therefore ensuring minimal susceptibility to changes in the software. <br />\nAlso consider what the tests are testing for. Automated testing might apply to performance and load and therefore you need to look at it from a slightly different angle. For load tests in particular you will generally be looking at specialised tools to build the load using agents/virtual users or similar. The question becomes more about how important these tests are for you. Will your software ever get really heavy load or will understand performance for a single user be enough. <br />\nMost importantly of all, just because you may not be writing code based automated tests, remember the golden rule about feedback and aim to make the testing feedback loop as quickly as possible. <br />\nEven in a UI automation world keep your tests as small as possible and run them as often as possible against a controlled and repeatable environment. Start from having them on a continuous loop (picking up the latest build and running again as soon as they finish) and work backwards. If having them running continuously isn't possible can they run twice a day, overnight and then as an absolute worst case scenario, weekly. <br />\nBy running them as often as possible you are doing two things:</p>\n\n<ul>\n<li>Keeping the feedback loop of the tests as quick as possible</li>\n<li>Making the tests easier to maintain (if a valid change to the software causes the tests to break and hasn't been identified up front, a smaller time between running the tests gives you a smaller window of changes that could have broken the tests)</li>\n</ul>\n\n<p>2) You need to understand that automated testing is really just automated checking. It will only check what you tell it to check and is only as good as the checks you identify. It isn't going to suddenly transform your testing if you aren't already able to find the best way of testing your product manually. I know many would disagree and would consider it waste however I think where possible you should only automate what you have already defined as manual tests, validating expected product behaviour. Having appropriate manual tests for all of your automated tests is a good reference point for what the test is trying to prove, particularly if you have different people picking up and putting down the tests for execution or maintenance. Let's be honest writing code blindly without fully understanding the users requirement is a bad idea whether that is for test or development purposes. Having clear behavioural tests will also help you to avoid automating tests against how the functionality is rather than against the expected behaviour. A test failing should get you to question the product not question the test therefore having confidence that the tests represent a customer's expectations/requirements is massively important if you want to avoid regular arguments about the tests or potentially even worse, people establishing apathy towards tests and just ignoring them.</p>\n\n<p>3) Ownership of tests is a big consideration for anyone considering automated testing. Consider carefully how you work. Do you have or are you aiming for a continuous integration/continuous delivery model? If you are then consider how tests will fit into your delivery pipeline and therefore how long they will take to run. More importantly consider if the tests look to be broken who do you want to fix them, what their availability is and how long will it take. Working in Agile teams in a continuous integration/delivery environment you need the team to have the ability to identify and solve any problem that comes up. In a short iteration or in single piece flow/WIP limit practices you really don't want to be waiting on other teams to fix the tests or update the tests in line with changes made. All of that said, getting a team to take ownership of something written by a completely separate group without fully understanding the goals or having inputted into how it was written is a big challenge. Where you really want to be is that appropriate tests are part of the deliverable from a team giving them confidence and understanding of the tests and therefore increasing the value (or perceived value) of your tests in the delivery pipeline).</p>\n\n<ul>\n<li>But we barely have time to do the development work in the timescales without writing the automated tests as well!</li>\n</ul>\n\n<p>If the tests (checks) are necessary then they need to be done somewhere before you can release the software to get any value out of the changes you are making. If you aren't automating them then you are testing them manually and if the area of the software is high impact and/or high risk then you are probably going to be changing and therefore testing this on a regular basis. That can add up to high cost of test (see the test triangle) to do basic checks that automation can do. It is also reducing the time your testers could spend working with the team and helping to build quality in or completing valuable 'testing' that automation can't perform. Maybe planning in time for test automation isn't such a high expense after all, especially if you are creating code based tests.</p>\n\n<ul>\n<li>But I'm a developer, it's not my job to write tests</li>\n</ul>\n\n<p>I'm not even going to justify this with a response. It's your job to get software that is fit for purpose to customers.</p>\n\n<p>There may still be reasons within your control or outside of your control that mean having automation created by a separate team is absolutely desirable/necessary. If this is the case it doesn't mean all ownership must be lost, it just means the teams need to work a little harder and be a little more disciplined on communication. Consider treating the automated tests as software in their own right. Get the team delivering the product/changes sitting down with those writing the tests to agree the deliverables, aim of the tests and approach to writing the tests. Maybe get regular touch points between the two groups to discuss progress and get sight of the automated tests being written allowing input and suggestions from both sides to be discussed. Look at implementing code reviews by the product development team over the automated tests being created on a regular basis. This will all increase the chances of the automated testing being co-owned by the two teams and increase the pool of people able and willing to maintain the tests.</p>\n\n<p>4) Understanding the tooling options and what best fits your needs is vital. Failure to do due diligence on this and really understand the previous points before committing to a given tool and approach can send you steaming down a route that eventually hits a wall or needs to change which then leaves you with large numbers of assets (created at a large cost). These assets either become unusable or need extra effort to transfer. Alternatively you could find yourself with high licensing costs for software that sits on the shelf because you can't find a way of introducing it without breaking delivery. <br />\nAssuming you have given careful consideration to all of the previous points and have;</p>\n\n<ul>\n<li>decided how much testing you can do in the code (based on how you are developing software or want to develop software),  </li>\n<li>ensured you are clear on how you are going to provide traceability/understanding of tests you want to automate</li>\n<li>have a clear view of who will own, maintain and execute the tests,</li>\n</ul>\n\n<p>then you need to find a tool that fits your need. <br />\nThere will always be pro's and con's to any tool you decide to use so don't go looking for perfection or you are likely to end up disappointing. Below are a few categories and examples to consider:</p>\n\n<p><em>Code based test automation</em></p>\n\n<p>More frameworks than tools, to allow unit tests built into the code to be executed and the results presented back. Building unit tests into your development activity is a highly (relatively) technical skillset and an understanding of how to pass inputs in and assess outputs through the code base is needed. Stubs, object mocks and test harnesses are useful options to help control the test inputs and outputs. Getting value out of unit testing (as opposed to just having tests in the code for the sake of it) is something often missed. <br />\nTest Driven Development and Behavioural Driven Development are test first methodologies aimed at identifying tests up front, writing the tests which initially break/fail and then developing the solution to ensure the tests pass. As already identified code based tests have the value of minimal overhead (you are already developing the product so adding extra code to test the product up front is a much cheaper overhead than trying to write tests after the fact), high coverage and fast feedback (tests being run on every check in of code). <br />\nCommon test frameworks include:</p>\n\n<p>Arguably the most common framework for code based testing is the x-unit family (N-Unit, J-Unit, Fs-Unit etc.) although alternative frameworks are becoming more common, for example those delving into the world of the MEAN Stack are likely to be picking up Jasmine or you may be using/want to look at something like TestNG.</p>\n\n<p><em>API/Integration test automation</em></p>\n\n<p>The aim of integration tests is to orchestrate integration of different components of the software and ensure they all hang together effectively. If your software/web service has a strong service layer you can benefit from testing this through the service layer and interacting with the API rather than relying on the User Interface. Integration tests will generally rely on completion and build of a component as opposed to executing on check in therefore the feedback loop will be longer than code based tests however the improved stability due to not needing to rely on the User Interface and the speed of execution due to interacting with the service layer (no dependency on screen loads, or object states) means integration tests are much more suited to a continual integration/delivery environment than ui automation and depending on the service layer available in your software can potentially give you as much confidence of the End to End stability.</p>\n\n<p>Essentially Integration tools can be anything from the x-unit or TestNG frameworks to more dedicated testing tools such as LDRA, Citrus or Robot framework. Even tools like Selenium (whilst not ideal) can be setup to test against the api but need to be hooked into a framework such as TestNG or Robot.</p>\n\n<p><em>UI test automation</em></p>\n\n<p>You may have already noticed my reluctance to use UI automation however I'd be lying if I said I hadn't previously made the decision to go down the UI automation route. UI automation essentially interacts with the objects in the UI and provides the most realistic user representation testing but suffers from flakiness associated with object recognition, waiting on objects, return values or task completion. Understanding the flaws (already discussed) in relation to ownership, regular test execution, size of the tests and control over the environment and data can help you derive value from UI automation testing especially if you have software with a limited/non-existent service layer or a large amount of business logic in the UI. Also automation ID's can be put into the UI layer to help with interaction but whilst they help don't expect them to be a silver bullet.</p>\n\n<p>UI Automation test tooling has a variety of options for all budgets if you have a web based product. These include open source tooling such as selenium, Robot and Watir to proprietary solutions with a higher cost such as Ranorex, Test Complete (Smartbear) or HP's unified functional tester (formerly Quick Test Professional). If you are testing a web product and decide you need to test against the UI then I would be surprised if you can find many reasons to pay for proprietary testing software as opposed to making Selenium work for you. <br />\nIf you are working against a desktop application then you are a little more restricted. The proprietary options are pretty much similar with HP UFT, Test Complete and Egg Plant leading the way and providing broadly similar capability but varying price points. Robot Framework (with the autoit library) is worth consideration from the open source pot or alternatively if you are a Microsoft house with .net framework based products you may have a couple of options dependant on your licencing. CodedUI has the benefit of feeding into the Microsoft performance test capabilities. TestStack White should also be considered if you are working with .net framework and can also be used in conjunction with CodedUI as it is built on top of Microsoft's UIAutomation library. I have found this to be an option that helps with the ownership consideration and receives a much better reception if you want developers to be part of the UI test automation solution.</p>\n\n<p><strong>What Now?</strong></p>\n\n<p>As stated previously this is not meant as a guide to follow, these are just some of my own thoughts. You will come across a broad spectrum of opinions on use of automated testing and I would suggest anyone looking to get value out of automation does their own research and considers a variety of information. So many factors will influence what test automation is best suited to you, your team, your product and your situation and at the end of the day only you understand those factors fully, Don't go into test automation half-heartedly. Be prepared to invest continually into making it a success, adapt to challenges you encounter and getting everyone on board with building it into your planning and delivery. Encourage a mindset that if a test is broken you either fix the test or the code but never ignore it. Don't be afraid to find ways to change and improve to get the most out of test automation but build your test automation on the foundations of quickest possible test feedback, testing early and testing often. <br />\n<img src=\"/content/images/2016/Mar/images--2-.jpg\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1458150045619,"created_by":1,"updated_at":1459329587752,"updated_by":1,"published_at":1458656568228,"published_by":1}],"users":[{"id":1,"uuid":"79e895b2-7a91-4efc-b096-54bc2727d183","name":"Matt Parker","slug":"matthew-parker","password":"$2a$10$7UZKGHHyYaJ.WzgwaQaBXe6RQarIMHHdTNufkFLhgX75dyW8oy5V2","email":"mattcparker@virginmedia.com","image":"/content/images/2016/Mar/image-1.jpg","cover":"/content/images/2014/Aug/ansel-adams-tetons-snake-river.jpg","bio":"15 years in software development, 12 of those in software testing, 6 years test automation and 4 years in an Agile environment. What have I learnt?\nThere is no right way to test just a right mindset.","website":null,"location":"In fields of green","accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":1460215935086,"created_at":1408997576533,"created_by":1,"updated_at":1460215935086,"updated_by":1}],"roles":[{"id":1,"uuid":"8550c012-917c-4686-8337-fca10aebde4f","name":"Administrator","description":"Administrators","created_at":1408994804454,"created_by":1,"updated_at":1408994804454,"updated_by":1},{"id":2,"uuid":"8e1973b1-5802-4320-903f-26b5774dcd7a","name":"Editor","description":"Editors","created_at":1408994804485,"created_by":1,"updated_at":1408994804485,"updated_by":1},{"id":3,"uuid":"94fb745e-bcc2-422e-85ed-aaca930b6081","name":"Author","description":"Authors","created_at":1408994804510,"created_by":1,"updated_at":1408994804510,"updated_by":1},{"id":4,"uuid":"d37e45e1-453b-435b-a5ce-5ff3eab9888a","name":"Owner","description":"Blog Owner","created_at":1408995051699,"created_by":1,"updated_at":1408995051699,"updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"permissions":[{"id":4,"uuid":"430919d8-35ef-4892-a8f7-3e3b80383923","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":1408995051704,"created_by":1,"updated_at":1408995051704,"updated_by":1},{"id":5,"uuid":"6ca16e89-670a-4974-b0d5-359753844936","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":1408995051847,"created_by":1,"updated_at":1408995051847,"updated_by":1},{"id":6,"uuid":"a7c320fc-99c4-4c05-bafa-1c490da87da0","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":1408995051974,"created_by":1,"updated_at":1408995051974,"updated_by":1},{"id":7,"uuid":"70ddc877-37aa-408f-9fbd-09bda025d2ee","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":1408995053122,"created_by":1,"updated_at":1408995053122,"updated_by":1},{"id":8,"uuid":"562f83e7-2850-49fc-ab7e-5961aa455dfc","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":1408995053160,"created_by":1,"updated_at":1408995053160,"updated_by":1},{"id":9,"uuid":"a29b5df0-7954-4a42-845b-92f246f3d540","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":1408995053195,"created_by":1,"updated_at":1408995053195,"updated_by":1},{"id":10,"uuid":"108b0dd0-727a-4887-958c-87f8451c6038","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":1408995053235,"created_by":1,"updated_at":1408995053235,"updated_by":1},{"id":11,"uuid":"285253a8-5b19-44fb-9fe9-8544c4fab312","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":1408995053274,"created_by":1,"updated_at":1408995053274,"updated_by":1},{"id":12,"uuid":"47ccdfe0-cf29-42a7-9415-28009e6cf3ac","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":1408995053308,"created_by":1,"updated_at":1408995053308,"updated_by":1},{"id":13,"uuid":"82e9fa49-2e24-40b8-95fd-fdc84994f8cf","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1408995053343,"created_by":1,"updated_at":1408995053343,"updated_by":1},{"id":14,"uuid":"a76a678e-e05d-421b-b9ac-81e52e59d068","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":1408995053371,"created_by":1,"updated_at":1408995053371,"updated_by":1},{"id":15,"uuid":"93c4343c-fd38-4835-8119-3e1b97af97e1","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":1408995053396,"created_by":1,"updated_at":1408995053396,"updated_by":1},{"id":16,"uuid":"8d847d0b-4460-4bea-9277-120ecc890ca1","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":1408995053424,"created_by":1,"updated_at":1408995053424,"updated_by":1},{"id":17,"uuid":"a8bcffd2-ab7f-4eeb-ad27-ecfccef1f077","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":1408995053457,"created_by":1,"updated_at":1408995053457,"updated_by":1},{"id":18,"uuid":"8f27a2bf-9b0c-4cea-8b60-0c181bd35190","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":1408995053495,"created_by":1,"updated_at":1408995053495,"updated_by":1},{"id":19,"uuid":"5a3a5d63-1ee0-4730-9018-f9f3ee1e72a6","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":1408995053528,"created_by":1,"updated_at":1408995053528,"updated_by":1},{"id":20,"uuid":"209f327b-3925-435d-88d1-3bc914f8a452","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":1408995053549,"created_by":1,"updated_at":1408995053549,"updated_by":1},{"id":21,"uuid":"7a32a2ec-271a-4d87-8a2a-e5aa9279c85f","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":1408995053580,"created_by":1,"updated_at":1408995053580,"updated_by":1},{"id":22,"uuid":"d11691f6-60c8-440c-a813-c1e1a1412496","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":1408995053604,"created_by":1,"updated_at":1408995053604,"updated_by":1},{"id":23,"uuid":"5a9424bc-78ec-4405-8866-24fda330dd4f","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":1408995053641,"created_by":1,"updated_at":1408995053641,"updated_by":1},{"id":24,"uuid":"8a5b75f2-67c1-49aa-9683-9f629514992f","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":1408995053673,"created_by":1,"updated_at":1408995053673,"updated_by":1},{"id":25,"uuid":"4e43e585-93b7-4502-a80b-b166a638a134","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":1408995053705,"created_by":1,"updated_at":1408995053705,"updated_by":1},{"id":26,"uuid":"b39c74bb-bd7a-42e4-a841-860ecb273ea5","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":1408995053739,"created_by":1,"updated_at":1408995053739,"updated_by":1},{"id":27,"uuid":"80fee9bf-14ae-423c-a7ef-2ba11fe34368","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":1408995053773,"created_by":1,"updated_at":1408995053773,"updated_by":1},{"id":28,"uuid":"75982fbb-958f-4cc1-9670-a58491010aa1","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":1408995053801,"created_by":1,"updated_at":1408995053801,"updated_by":1},{"id":29,"uuid":"d94511f6-a30b-4db4-a3bb-b292d09f9729","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":1408995053829,"created_by":1,"updated_at":1408995053829,"updated_by":1},{"id":30,"uuid":"b88479bb-21da-4aed-86f6-fc0a42149817","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":1408995053863,"created_by":1,"updated_at":1408995053863,"updated_by":1},{"id":31,"uuid":"d440adcf-2a43-4059-9e65-ba208b4f2091","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":1408995053909,"created_by":1,"updated_at":1408995053909,"updated_by":1},{"id":32,"uuid":"edbf7156-2701-4ad1-b538-07413938e76f","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":1408995053940,"created_by":1,"updated_at":1408995053940,"updated_by":1},{"id":33,"uuid":"4e345b69-04d8-4cec-baeb-39384314bf75","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":1408995053974,"created_by":1,"updated_at":1408995053974,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":1,"permission_id":31},{"id":32,"role_id":1,"permission_id":32},{"id":33,"role_id":1,"permission_id":33},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":15},{"id":39,"role_id":2,"permission_id":16},{"id":40,"role_id":2,"permission_id":17},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":22},{"id":45,"role_id":2,"permission_id":23},{"id":46,"role_id":2,"permission_id":24},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":2,"permission_id":31},{"id":52,"role_id":2,"permission_id":32},{"id":53,"role_id":2,"permission_id":33},{"id":54,"role_id":3,"permission_id":11},{"id":55,"role_id":3,"permission_id":12},{"id":56,"role_id":3,"permission_id":14},{"id":57,"role_id":3,"permission_id":16},{"id":58,"role_id":3,"permission_id":17},{"id":59,"role_id":3,"permission_id":19},{"id":60,"role_id":3,"permission_id":20},{"id":61,"role_id":3,"permission_id":21},{"id":62,"role_id":3,"permission_id":23},{"id":63,"role_id":3,"permission_id":27},{"id":64,"role_id":3,"permission_id":28},{"id":65,"role_id":3,"permission_id":33}],"settings":[{"id":1,"uuid":"4d95e7fb-bb73-46f3-b189-3e1b92de3d8d","key":"databaseVersion","value":"003","type":"core","created_at":1408994804642,"created_by":1,"updated_at":1408994804642,"updated_by":1},{"id":2,"uuid":"4ad98ad6-74a5-4068-8a7e-60e618fc90ab","key":"dbHash","value":"365ddc60-fc15-4870-905e-902ca3733224","type":"core","created_at":1408994804644,"created_by":1,"updated_at":1408994805314,"updated_by":1},{"id":3,"uuid":"89176fa2-4eb7-4593-ac4e-ff95b7566e3a","key":"nextUpdateCheck","value":"1460302317","type":"core","created_at":1408994804644,"created_by":1,"updated_at":1460215917742,"updated_by":1},{"id":4,"uuid":"ecf598ea-589c-493c-9959-3567c43924f9","key":"displayUpdateNotification","value":"0.5.0","type":"core","created_at":1408994804644,"created_by":1,"updated_at":1460215917745,"updated_by":1},{"id":5,"uuid":"b74bff45-f2e6-4072-bd65-0586e6a87f0d","key":"title","value":"Testing Tackled","type":"blog","created_at":1408994804645,"created_by":1,"updated_at":1458692318659,"updated_by":1},{"id":6,"uuid":"669f9340-9d5b-4c6b-8356-fcb3145c8093","key":"description","value":"Testing, quality, testing, quality and maybe a bit more testing!","type":"blog","created_at":1408994804646,"created_by":1,"updated_at":1458692318660,"updated_by":1},{"id":7,"uuid":"2551550f-5e03-4a42-8ec6-7289006efd5c","key":"email","value":"matthew.parker@virginmedia.com","type":"blog","created_at":1408994804646,"created_by":1,"updated_at":1458692318661,"updated_by":1},{"id":8,"uuid":"fc42ea5b-4fdb-406b-abf5-c6a83be47816","key":"logo","value":"/content/images/2016/Mar/image-3.jpg","type":"blog","created_at":1408994804646,"created_by":1,"updated_at":1458692318663,"updated_by":1},{"id":9,"uuid":"8d866a68-b6c5-4dcc-9ce0-118246189c4b","key":"cover","value":"/content/images/2015/Oct/IMG_0453.JPG","type":"blog","created_at":1408994804650,"created_by":1,"updated_at":1458692318664,"updated_by":1},{"id":10,"uuid":"c1dae4e5-0d2a-4476-868b-2c92a6f8a1f5","key":"defaultLang","value":"en_US","type":"blog","created_at":1408994804650,"created_by":1,"updated_at":1458692318665,"updated_by":1},{"id":11,"uuid":"f305db61-f145-4573-8bdd-3fa968b4d125","key":"postsPerPage","value":"6","type":"blog","created_at":1408994804650,"created_by":1,"updated_at":1458692318666,"updated_by":1},{"id":12,"uuid":"f37d471c-afbe-4ba4-9f14-402f7871ad22","key":"forceI18n","value":"true","type":"blog","created_at":1408994804650,"created_by":1,"updated_at":1458692318667,"updated_by":1},{"id":13,"uuid":"59e1fef4-2004-427c-bba9-9fdfbe31a1f7","key":"permalinks","value":"/:slug/","type":"blog","created_at":1408994804651,"created_by":1,"updated_at":1458692318668,"updated_by":1},{"id":14,"uuid":"76aded41-cad7-415e-9a12-91dc4512a1e8","key":"activeTheme","value":"ghostium-master","type":"theme","created_at":1408994804653,"created_by":1,"updated_at":1458692318670,"updated_by":1},{"id":15,"uuid":"a00f1cab-a910-4acf-96ea-4a31fc73f8df","key":"activeApps","value":"[]","type":"app","created_at":1408994804653,"created_by":1,"updated_at":1408994804653,"updated_by":1},{"id":16,"uuid":"ae79745c-88ac-48b2-a267-3cb901369f7f","key":"installedApps","value":"[]","type":"app","created_at":1408994804654,"created_by":1,"updated_at":1460219128301,"updated_by":1}],"tags":[{"id":1,"uuid":"c84e8786-965b-477e-be55-0d916c87694a","name":"Getting Started","slug":"getting-started","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1408994804426,"created_by":1,"updated_at":1408994804426,"updated_by":1,"image":null,"hidden":0},{"id":2,"uuid":"32c57422-71e0-43fc-842f-eb26d3624bd5","name":"general","slug":"general","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1408998190386,"created_by":1,"updated_at":1408998190386,"updated_by":1,"image":null,"hidden":0},{"id":3,"uuid":"430e624b-1016-47aa-95a6-13c32892ebd7","name":"Quality Assurance","slug":"quality-assurance","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1410264829170,"created_by":1,"updated_at":1410264829170,"updated_by":1,"image":null,"hidden":0},{"id":4,"uuid":"b5773027-5b1e-46a9-8ef2-34bead704261","name":"Team Roles","slug":"team-roles","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1410264829171,"created_by":1,"updated_at":1410264829171,"updated_by":1,"image":null,"hidden":0},{"id":5,"uuid":"e9d9f913-6835-4731-b4f0-5a43b7b5a949","name":"Test Improvement","slug":"test-improvement","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1410357285855,"created_by":1,"updated_at":1410357285855,"updated_by":1,"image":null,"hidden":0},{"id":6,"uuid":"f4b5c0fe-6258-43d5-b8ad-ab2da99309c8","name":"Testing","slug":"testing","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1410357285856,"created_by":1,"updated_at":1410357285856,"updated_by":1,"image":null,"hidden":0},{"id":7,"uuid":"bb4a81b6-9a8b-4650-8685-41c23fbc3670","name":"Process","slug":"process","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1410357285856,"created_by":1,"updated_at":1410357285856,"updated_by":1,"image":null,"hidden":0},{"id":8,"uuid":"97dedd01-43b7-4654-b3bb-d1806da7386c","name":"GeneralStandardisation","slug":"generalstandardisation","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1412633710185,"created_by":1,"updated_at":1412633710185,"updated_by":1,"image":null,"hidden":0},{"id":9,"uuid":"3374764d-c2e4-4091-8439-f95655f74a22","name":"P","slug":"p","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1412633784811,"created_by":1,"updated_at":1412633784811,"updated_by":1,"image":null,"hidden":0},{"id":10,"uuid":"a5a4465f-307c-4a47-936c-085a78b1667d","name":"Testing Process","slug":"testing-process","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431419477465,"created_by":1,"updated_at":1431419477465,"updated_by":1,"image":null,"hidden":0},{"id":11,"uuid":"68f53588-de06-4d6a-acaa-113dbdfb126c","name":"Attitude","slug":"attitude","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431419477466,"created_by":1,"updated_at":1431419477466,"updated_by":1,"image":null,"hidden":0},{"id":12,"uuid":"e4851083-dd90-45ae-ab3a-413b40ff7e69","name":"Test Automation","slug":"test-automation","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1458655285851,"created_by":1,"updated_at":1458655285851,"updated_by":1,"image":null,"hidden":0}],"posts_tags":[{"id":19,"post_id":2,"tag_id":2},{"id":20,"post_id":3,"tag_id":3},{"id":21,"post_id":3,"tag_id":4},{"id":22,"post_id":5,"tag_id":5},{"id":23,"post_id":5,"tag_id":6},{"id":24,"post_id":5,"tag_id":7},{"id":25,"post_id":4,"tag_id":8},{"id":27,"post_id":6,"tag_id":3},{"id":28,"post_id":6,"tag_id":7},{"id":29,"post_id":9,"tag_id":6},{"id":30,"post_id":9,"tag_id":10},{"id":31,"post_id":9,"tag_id":11},{"id":40,"post_id":10,"tag_id":12}],"permissions_apps":[],"apps":[],"app_settings":[],"app_fields":[]}}